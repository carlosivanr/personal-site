{
  "hash": "228d0bee528b7b321e67c2eee2fd4c89",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Set up venv in Python\"\nhtml:\n    toc: true\n\nexecute:\n  eval: false\n---\n\n\n\n\n# Configure virtual environments in Python \nSimilar to R, installing Python creates a global environment. However, it is recommended to create a virtual environment for each project akin to an renv in R. Creating a virtual environment for each project avoids package conflicts amongs multiple projects. The virtual environment should be created in the root directory of the project folder.\n\n## Create a virtual environment\nTo create a Python virtual environment:\n\n* Open Positron/VS Code/RStudio\n  * If using RStudio, ensure Powershell is your designated terminal in Global Options\n* Select the Terminal tab\n* Navigate to the project's root directory\n* Execute the following command replacing [virtual-environment-name] with the name of the environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npython -m venv [virtual-environment-name]\n\n# Alternative command if the above does not work\npy -m venv [virtual-environment-name]\n```\n:::\n\n\n\n\nn.b. In Positron, creating a virtual environment may result in a message to install ipykernel. Select yes if prompted. Also, depending on the installation, the python -m venv command may not work, but the py -m venv will. This could be due to different configurations of how python was installed on a machine or whether or not its set in the path.\n\n## Activate a virtual environment\nAfter a virtual environment is created it must be activated. In R, an renv enabled project will always load the designated renv. In contrast, a Python virtual environment has to be activated manually. To activate a Python virtual environment, use the Windows PowerShell to navigate to the root project directory. From there run the Activateps1 file. When the python environment is active, the name of command prompt will change to show the virtual environment name in parentheses[^1]. If using Command Prompt as your shell, then execute the activate.bat file.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.\\py_env\\Scripts\\Activate.ps1\n```\n:::\n\n\n\n\n## spawn cmd noent error\nUpon restarting Positron, I've encountered a `spawn cmd noent` error and the application fails to activate the virtual environment. To overcome this error, set PATH environment variable to \"C:\\\\Windows\\\\System32\\\\\" per\tthis [post](https://github.com/forcedotcom/salesforcedx-vscode/issues/1818) from baibalorenzo.\n\n# Package management\n## Install modules\nWhen a virtual environment is activated all subsequently installed packages will only be available in that environment. To install packages use pip, the package installer for python in the Terminal tab. This marks as an important difference between R and Python. In R, packages can be installed from the console. In Python, packages need to be installed from the shell/terminal in an activated environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npip install [module-name]\n```\n:::\n\n\n\n\n## Save modules in a virtual environment to requirements.txt\nAfter installing all desired packages, one can create a \"requirements.txt\" file. This file records each package and its version which can later be used to install the same set of packages in a different environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npip freeze > requirements.txt\n```\n:::\n\n\n\n\n## Install modules from requirements.txt\nIf a requirements.txt file is available from a different project using the same packages, that file can be copied and pasted into the virtual environment directory and used to automatically install packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npip install -r requirements.txt\n```\n:::\n\n\n\n\n## Check Quarto installation\nIn an activated virtual environment, run the following command to check the Quarto installation. This command checks that Quarto and Python are configured properly. In my experience, the python packages nbformat and nbclient are often required for Quarto to work properly. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto check\n\npip install nbformat\n\npip install nbclient\n```\n:::\n\n\n\n\nIf the Quarto installation is properly configured, create a .qmd document to test it. Copy and paste the .qmd code in this Quarto [link](https://quarto.org/docs/computations/python.html) and save the file as matplotlib_demo.qmd. Next, install matplotlib to the virtual environment using pip install. Finally, render the .qmd file using the \"Preview\" button near the top right hand corner of the text editor in Positron. This button looks like an icon for a newspaper. If the file renders, then you're good to go. If not there may be some additional troubleshooting to go through.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npip install matplotlib\n```\n:::\n\n\n\n\n[^1]: It is possible that the desired virtual environment is activated, but does not appear so because the command prompt does not display the name in parentheses. Positron will display a message in the lower right hand corner of the application when this occurs.",
    "supporting": [
      "setup_venv_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}