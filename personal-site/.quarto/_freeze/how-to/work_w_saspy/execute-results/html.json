{
  "hash": "8dcafaae4cbf1c4ab2795f03731128e9",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Work with SASPy\"\nhtml:\n    toc: true\n\nexecute:\n  eval: false\n\njupyter: py_env\n---\n\n\n\n\n\n\n\n\n\n\n# Initiate a session\nOnce SASPy is configured the first step win working with SASPy is to initiate a session. This will launch a SAS session in the background that will be available to run statistical analyses on any input data. \n\n::: {#b87069d2 .cell execution_count=1}\n``` {.python .cell-code}\n# Data manipulation\nimport pandas as pd\n\n# Module with sample data set\nimport bambi as bmb\n\n# Interface with SAS\nimport saspy\n\n# Loads a custom function\nfrom my_fx.utilities import format_pval_df\n```\n:::\n\n\n::: {#fdf5f64c .cell execution_count=2}\n``` {.python .cell-code}\nsas = saspy.SASsession(cfgname = 'autogen_winlocal')\n```\n:::\n\n\n# Load an example data set\n\n::: {#f9df12e9 .cell execution_count=3}\n``` {.python .cell-code}\ndata = bmb.load_data(\"sleepstudy\")\n```\n:::\n\n\n::: {#dd6ec9eb .cell execution_count=4}\n``` {.python .cell-code}\ndata.head()\n```\n:::\n\n\n# Send data to SAS\nThe next step in working with SASPy is to send a Pandas data frame to SAS. This command will send the data frame \"data\" to the background SAS session. Before sending data to SAS, it may be a good idea to double check that SAS has the proper formatting for dates and that the values, if categorical are recoded to comply with SAS column and value conventions. By default this data will be named _df and will be found in the work library\n\n::: {#4c6ee5c8 .cell execution_count=5}\n``` {.python .cell-code}\nsas_data = sas.df2sd(data, verbose = False)\n```\n:::\n\n\n# Submit SAS commands\nThe main functions to submit sas commands on data that is available in the sas session are `sas.submit()` and `sas.submitLST()`. The primary difference is that the LST version of the function will display the log and any output in the viewer when working in Positron. I personally use the LST version of the function to ensure that the SAS procedures are running correctly. When it is determined that the SAS procedures are running correctly. I then will remove the LST and then extract the tables from SAS to display in a Quarto document.  To save the output of SAS procedures I use ods output statements as in the example below. \n\n::: {#fb103ac0 .cell execution_count=6}\n``` {.python .cell-code}\n# Submit SAS commands, use sas.submitLST() to display output in viewer\nc = sas.submitLST(\n\"\"\"\n\nods output Tests3=type3_results;\n\nproc mixed data = work._df;\n  class Subject Days;\n  model Reaction = Days;\n  random intercept/subject = Subject;\nrun;\n\n\"\"\")\n```\n:::\n\n\n# Retrieve ods output tables from SAS\n\n::: {#41b9a388 .cell execution_count=7}\n``` {.python .cell-code}\ntype3_results = sas.sasdata(\"type3_results\", libref = \"work\").to_df()\n\n# Format the p values\ntype3_results[\"ProbF\"] = format_pval_df(type3_results['ProbF'])\n\n# Round all numberical values, set index and display\ntype3_results.round(2).set_index(\"Effect\")\n```\n:::\n\n\n",
    "supporting": [
      "work_w_saspy_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}